https://review.udacity.com/#!/reviews/2169514

Meets Specifications

Really nice job covering both schema and documentation!

You used foreign keys to bound table relationships, which is the most strict. Another relaxed way is to specify NOT NULL without the tighter bound.

Good luck on your next project!

NOTE TO SELF:
The reviewer suggests that I drop the foreign key constraint (which is not explicitly NOT NULL) and just use a NOT NULL constraint on artist_id and song_id in the songplays table.
This will result in only a solitary row inserted into the table (the row with non-null values in those 2 columns). My implementation, on the other hand, inserts NULLs in the FK columns. So, I have many rows in the result, but only one in which song_id and artist_id are NOT NULL.

Requirements checklist:
Table Creation

The script, create_tables.py, runs in the terminal without errors. The script successfully connects to the Sparkify database, drops any tables if they exist, and creates the tables.

CREATE statements in sql_queries.py specify all columns for each of the five tables with the right data types and conditions.
ETL

The script, etl.py, runs in the terminal without errors. The script connects to the Sparkify database, extracts and processes the log_data and song_data, and loads data into the five tables.

Since this is a subset of the much larger dataset, the solution dataset will only have 1 row with values for value containing ID for both songid and artistid in the fact table. Those are the only 2 values that the query in the sql_queries.py will return that are not-NONE. The rest of the rows will have NONE values for those two variables.

INSERT statements are correctly written for each table, and handle existing records where appropriate. songs and artists tables are used to retrieve the correct information for the songplays INSERT.
Code Quality

The README file includes a summary of the project, how to run the Python scripts, and an explanation of the files in the repository. Comments are used effectively and each function has a docstring.

Scripts have an intuitive, easy-to-follow structure with code separated into logical functions. Naming for variables and functions follows the PEP8 style guidelines.
